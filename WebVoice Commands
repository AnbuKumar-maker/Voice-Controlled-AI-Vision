/*
 Name:		Voice Command over the Web
 Created:	7th Aug 2010
 Author:	Anbu Kumar

 Simple WebApp on SPIFFS Served Locally via mDNS Name or IP
 Example #1 - RF Lightswitches - ESP32 as WiFi Client, Simple AJAX Requests or whole page loads for now (no WS yet)

 Upload and go to http://esp32.local (or inspect Serial monitor if connecting via IP)

 */
#ifdef ESP32
	#include <spiffs.h>
	#include <WiFi.h>
	#include <ESPmDNS.h>
    #define FORMAT_SPIFFS_IF_FAILED false		// You may have to set this to true the first time you run this
#endif 

#ifdef ESP8266
	#include <FS.h>
	#include <ESP8266WiFi.h>
	#include <ESP8266mDNS.h>
	#define FORMAT_SPIFFS_IF_FAILED                 // Leave Empty on ESP8266
#endif

#include <RCSwitch.h>

// WiFi Client Settings
const char* ssid = "**************";
const char* password = "**************";
const char* mDnsName = "esp32";
const byte hwPin_rfTx = 2;

WiFiServer server(9090);
RCSwitch mySwitch = RCSwitch();
File root;
void setup() {
	Serial.begin(115200);
	delay(5000);
	// Setup our File System in SPIFFS
	if (!SPIFFS.begin(FORMAT_SPIFFS_IF_FAILED)) {
		Serial.println("SPIFFS Mount Failed");
		return;
	}
	root = SPIFFS.open("/", "r");

	// Static IP Configuration
	IPAddress local_IP(192, 168, 0, 55);
	IPAddress gateway(192, 168, 0, 1);
	IPAddress subnet(255, 255, 255, 0);
	IPAddress primaryDNS(192, 168, 0, 1);
	IPAddress secondaryDNS(8, 8, 4, 4); // fake

	WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS);

	// Setup the Web Connection
	WiFi.begin(ssid, password);

	Serial.println(F("Connecting to Wifi. "));
	while (!WL_CONNECTED || WiFi.localIP().toString() == "0.0.0.0") {
		delay(500); // Yield() sdasdasdasd
		Serial.print(". ");
	}

	// Setup our Remote Controlled Wall Socket
	mySwitch.enableTransmit(2);
	Serial.print("Connected to ");
	Serial.print(ssid);
	Serial.print(" on IP address: ");
	Serial.println(WiFi.localIP());

	// Set up mDNS responder:
	// - first argument is the domain name, in this example
	//   the fully-qualified domain name is "mDnsName.local"
	if (!MDNS.begin(mDnsName)) {
		Serial.println("Error setting up MDNS responder!");
	}
	else {
		Serial.println("mDNS responder started");
	}

	// Finally startup the web server
	server.begin();
	Serial.println("TCP server started.");

	// Bind the HTTP requests via MDNS
	MDNS.addService("http", "tcp", 9090);
}


void loop(void) {
	WiFiClient client = server.available();   // listen for incoming clients

	if (client) { // Someone is talking to us...


		String currentLine = "";											// make a String to hold incoming data from the client
		while (client.connected()) {									    // loop while the client's connected

			String req = client.readStringUntil('\r');						// Read the first line of HTTP request

			// First line of HTTP request looks like "GET /path HTTP/1.1"
			// Retrieve the "/path" part by finding the spaces
			int addr_start = req.indexOf(' ');
			int addr_end = req.indexOf(' ', addr_start + 1);
			if (addr_start == -1 || addr_end == -1) {
				Serial.print("Invalid request: ");
				Serial.println(req);
				break;
			}
			req = req.substring(addr_start + 1, addr_end);
			Serial.print("Request: ");
			Serial.println(req);

			// Set Access Control Policy to allow CORS (Not actually needed here at present...)
			client.println("HTTP/1.1 200 OK\r\nAccess-Control-Allow-Origin: *\r\nContent-Type: text/html\r\n\r\n");
			handleFileRead(req, client);
		}

		// close the connection:
		client.stop();
		Serial.println("Client Disconnected.");
	}
}

// Handle all the content types we may get asked for from our SPIFFS
String getContentType(String filename) {
	if (filename.endsWith(".htm")) return "text/html";
	else if (filename.endsWith(".html")) return "text/html";
	else if (filename.endsWith(".css")) return "text/css";
	else if (filename.endsWith(".js")) return "application/javascript";
	else if (filename.endsWith(".png")) return "image/png";
	else if (filename.endsWith(".gif")) return "image/gif";
	else if (filename.endsWith(".jpg")) return "image/jpeg";
	else if (filename.endsWith(".ico")) return "image/x-icon";
	else if (filename.endsWith(".xml")) return "text/xml";
	return "text/plain";
}

// Handle a File request either via our custom handlers, or simply serving a file...
bool handleFileRead(String path, WiFiClient &client) {
	Serial.println("handleFileRead: " + path);
	if (path.endsWith("/")) path += "index.html";         // If a folder is requested, send the index file
	String contentType = getContentType(path);            // Get the MIME type

	// Simple hardcoding for now but can easily be expanded into the below
	// If we used a command with a number it would map in but "turn the light 1" sounds odd..
	if (path.startsWith("/on")) {
		mySwitch.switchOn(1, 1);
	}
	else if (path.startsWith("/off")) {
		mySwitch.switchOff(1, 1);
	}
	else
	// Handle our "custom" (non-file) requests first 
	// We Expect the URL  in format /socket/1/1/1 meaning:Socket 1, Address 1, Action ON
	if (path.startsWith("/socket/")) {
		int socket = path.charAt(8) - 48;
		int address = path.charAt(10) - 48;
		int action = path.charAt(12) - 48;

		client.print("Socket ");
		client.print(socket);	
		client.print(":");
		client.print(address);

		if (action == 1) {
			mySwitch.switchOn(socket, address);
			client.println(" ON");
			return true;
		}
		else {
			mySwitch.switchOff(socket, address);
			client.println(" OFF");
			return true;
		}
	}
	else if (SPIFFS.exists(path)) {                            // If the file exists
		File file = SPIFFS.open(path, "r");					   // Open it
		client.print(file.readStringUntil(EOF));			   // Read Until End Of File back to client
		file.close();                                          // Then close the file again
		return true;
	}

	Serial.println("\tFile Not Found");
	client.print("<b>Invalid Request</b>");		          // Show the user some info on web page
	return false;                                         // If the file doesn't exist, return false
}
